#!/bin/env ruby

require 'etc'
require 'fileutils'

ANDROID_ABI2OPENSSL_MAP = {
  'armeabi-v7a' => 'android-arm',
  'arm64-v8a' => 'android-arm64',
  'x86' => 'android-x86',
  'x86_64' => 'android-x86_64',
}

PROCESSOR_NUM = Etc.nprocessors

define_method :system do |*args|
  Kernel.system *args
  fail if $? == nil
  raise "Command non-zero exit status: #{args}" unless $?.exitstatus == 0
end

argv = ARGV
if argv.length != 1
  puts "Usage: #{File.basename $0} <openssl-project-dir>"
  exit 1
end
$openssl_dir = argv[0]

system "./gradlew :app:saveNdkPath"
tmp_file = File.open "./tmp"
File.delete tmp_file
$ndk_path = tmp_file.readlines[0]

ndk_prebuilt_dir = "#{$ndk_path}/toolchains/llvm/prebuilt"
if Dir.children(ndk_prebuilt_dir).length != 1
  raise "Multiple hosts found in #{ndk_prebuilt_dir}"
end
$toolchain_bin_dir = Dir.children(ndk_prebuilt_dir).map { |x| "#{ndk_prebuilt_dir}/#{x}/bin" }[0]

def build(target, ndk_api)
  Dir.chdir $openssl_dir
  env = ENV
  path_env = env['PATH']
  path_env = "#{$toolchain_bin_dir}:#{path_env}"

  env['PATH'] = path_env
  env['ANDROID_NDK_ROOT'] = $ndk_path

  system env, './Configure', target, "-D__ANDROID_API__=#{ndk_api}", '-latomic'

  system env, "make -j#{PROCESSOR_NUM}"
end

def get_property(properties, key)
  prefix = "#{key}="
  lines = properties.lines
  lines.each do |line|
    index = line.index prefix
    return line[(index + prefix.length)..] unless index == nil
  end
  nil
end

def clean
  # for the first build when Makefile hasn't been generated
  return unless File.exist? "#{$openssl_dir}/Makefile"
  Dir.chdir $openssl_dir
  system 'make clean'
end

properties = File.open("./config.properties").read
ndk_target_property = get_property properties, 'ndk.target'
fail if ndk_target_property == nil

output_libs_dir = "#{$openssl_dir}/libs"
ndk_target_property.split(',').each do |it|
  clean

  captures = it.match(/^(.*)-(\d+)$/).captures
  ndk_abi = captures[0]
  ndk_api = captures[1].to_i

  puts "Build: #{ndk_abi}, #{ndk_api}"
  build ANDROID_ABI2OPENSSL_MAP[ndk_abi], ndk_api

  %w[libcrypto.so libcrypto.a libssl.so libssl.a].each do |name|
    output_dir = "#{output_libs_dir}/#{ndk_abi}"

    FileUtils.mkdir_p output_dir unless Dir.exist? output_dir

    FileUtils.copy_file "#{$openssl_dir}/#{name}", "#{output_dir}/#{name}"
  end
end

puts 'Done'
